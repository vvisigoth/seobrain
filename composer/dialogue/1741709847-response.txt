# Message History Management Implementation

I'll implement a system to always keep the 5 most recent exchanges in the dialogue directory and move older ones to a history directory. Here's how to do it:

```python
def manage_message_history():
    """
    Maintains only the 5 most recent prompt/response pairs in the dialogue directory.
    Moves older messages to the history directory.
    """
    # Create history directory if it doesn't exist
    history_dir = "history/"
    Path(history_dir).mkdir(exist_ok=True)
    
    # Get all files in dialogue directory
    all_files = glob.glob(os.path.join(DIALOGUE_DIR, "*.txt"))
    
    # Group files by their timestamp prefix
    file_groups = {}
    for file_path in all_files:
        filename = os.path.basename(file_path)
        # Extract the timestamp from the filename (format: timestamp-type.txt)
        parts = filename.split('-', 1)
        if len(parts) == 2:
            timestamp = parts[0]
            if timestamp not in file_groups:
                file_groups[timestamp] = []
            file_groups[timestamp].append(file_path)
    
    # Sort timestamps in ascending order (oldest first)
    sorted_timestamps = sorted(file_groups.keys())
    
    # If we have more than 5 exchanges, move the oldest ones to history
    if len(sorted_timestamps) > 5:
        # Calculate how many timestamps to move
        timestamps_to_move = sorted_timestamps[:-5]  # All but the 5 most recent
        
        for timestamp in timestamps_to_move:
            for file_path in file_groups[timestamp]:
                # Get the destination path in the history directory
                dest_path = os.path.join(history_dir, os.path.basename(file_path))
                
                # Move the file
                try:
                    os.rename(file_path, dest_path)
                    print(f"Moved {file_path} to {dest_path}")
                except Exception as e:
                    print(f"Error moving file {file_path}: {e}")
```

Now, we need to call this function at the end of the `main()` function, right after saving the response:

```python
def main():
    # ... existing code ...
    
    try:
        # ... existing code ...
        
        # Save the response
        response_file = os.path.join(DIALOGUE_DIR, f"{epoch_time}-response.txt")
        with open(response_file, 'w') as f:
            f.write(response_text)
        
        # Manage message history - keep only the 5 most recent exchanges
        manage_message_history()
        
        # Extract and save code blocks if present
        # ... rest of existing code ...
```

## How This Works:

1. The `manage_message_history()` function:
   - Creates a "history" directory if it doesn't exist
   - Gets all files from the dialogue directory
   - Groups files by their timestamp prefix
   - Sorts the timestamps chronologically
   - Keeps only the 5 most recent exchanges in the dialogue directory
   - Moves all older files to the history directory

2. Each "exchange" consists of multiple files with the same timestamp (prompt, context, response)

3. The function is called after saving a new response, ensuring the dialogue directory always contains only the 5 most recent exchanges

## Advantages of This Approach:

1. **Simple implementation**: No need for complex diarization
2. **Preserves complete history**: All messages are kept, just in different locations
3. **Clean dialogue directory**: Only recent exchanges are visible in the main directory
4. **Easy to recover**: If needed, files can be moved back from history to dialogue

This implementation replaces the current dialogue history handling with a simpler, more direct approach that keeps exactly 5 exchanges in the main dialogue directory.